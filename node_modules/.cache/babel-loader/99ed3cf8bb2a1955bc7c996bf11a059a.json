{"ast":null,"code":"var _jsxFileName = \"/home/tyler/react-minesweeper/src/minesweeper/Minesweeper.js\";\nimport React from 'react';\nimport styles from './Minesweeper.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Minesweeper extends React.Component {\n  /*\n  * Crete a new minesweeper component\n  */\n  constructor(props) {\n    super(props); // Read in props\n\n    this.state = {\n      size: props.size,\n      mines: props.mines,\n      numCorrect: 0,\n      numFlags: 0,\n      status: \"playing\",\n      map: []\n    }; // Create a new mine field\n\n    this.createNewMap();\n  }\n  /*\n  * Inititalize a minesweeper map with this.state.size (square) ad this.state.mines\n  */\n\n\n  createNewMap() {\n    var _map = this.state.map; // Create the blank map\n\n    for (var x = 0; x < this.state.size; x++) {\n      _map[x] = [];\n\n      for (var y = 0; y < this.state.size; y++) {\n        _map[x][y] = {\n          \"flag\": false,\n          \"open\": false,\n          \"mine\": false\n        };\n      }\n    } // Randomize mine locations\n\n\n    for (var i = 0; i < this.state.mines; i++) {\n      _map[Math.floor(Math.random() * this.state.size)][Math.floor(Math.random() * this.state.size)].mine = true;\n    } // Store it\n\n\n    this.setState({\n      map: _map\n    });\n  }\n  /*\n  * Handles when a space gets left clicked\n  */\n\n\n  leftClickHandler(x, y) {\n    if (this.state.status !== \"playing\") return; // Don't want to be able to open flagged cells.\n\n    if (this.state.map[x][y].flag) return;\n    var _map = this.state.map;\n    _map[x][y].open = true; // If we get a zero square, left click all around it for auto complete.\n\n    if (this.countNeighborBombs(x, y) === 0) {\n      for (var i = x - 1; i <= x + 1; i++) {\n        for (var j = y - 1; j <= y + 1; j++) {\n          if (i >= 0 && j >= 0 && i < this.state.size && j < this.state.size) {\n            _map[i][j].open = true;\n          }\n        }\n      }\n    }\n\n    this.setState({\n      map: _map\n    }, () => {\n      if (this.state.map[x][y].mine) {\n        this.setState({\n          status: \"lose\"\n        });\n      }\n    });\n  }\n  /*\n  * Handles when a space gets right clicked\n  */\n\n\n  rightClickHandler(e, x, y) {\n    if (this.state.status !== \"playing\") return;\n    e.preventDefault();\n    var _map = this.state.map;\n\n    if (_map[x][y].flag) {\n      // About to be unflagged\n      this.setState({\n        numFlags: this.state.numFlags - 1\n      });\n\n      if (_map[x][y].mine) {\n        // About to be incorrect\n        this.setState({\n          numCorrect: this.state.numCorrect - 1\n        });\n      }\n    } else {\n      // About to be flagged\n      this.setState({\n        numFlags: this.state.numFlags + 1\n      });\n\n      if (_map[x][y].mine) {\n        // About to be correct\n        this.setState({\n          numCorrect: this.state.numCorrect + 1\n        });\n      }\n    } // Flip-flop the flag\n\n\n    _map[x][y].flag = !_map[x][y].flag;\n    this.setState({\n      map: _map\n    }, () => {\n      if (this.state.numCorrect === this.state.mines && this.state.mines === this.state.numFlags) {\n        this.setState({\n          status: \"win\"\n        });\n      }\n    });\n  }\n  /*\n  * Determines the bombs that surround this space\n  */\n\n\n  countNeighborBombs(x, y) {\n    var count = 0;\n\n    for (var i = x - 1; i <= x + 1; i++) {\n      for (var j = y - 1; j <= y + 1; j++) {\n        if (i >= 0 && j >= 0 && i < this.state.size && j < this.state.size) {\n          if (this.state.map[i][j].mine) {\n            count++;\n          }\n        }\n      }\n    }\n\n    return count;\n  }\n  /*\n  * Determines the text to put in this space\n  */\n\n\n  determineSpaceContent(x, y) {\n    if (this.state.map[x][y].open) {\n      if (this.state.map[x][y].mine) {\n        return \"X\";\n      } else {\n        return this.countNeighborBombs(x, y).toString();\n      }\n    } else if (this.state.map[x][y].flag) {\n      return \"☑\";\n    } else {\n      return \"☐\";\n    }\n  }\n  /*\n  * Win/lose message if needed\n  */\n\n\n  determineMessage() {\n    if (this.state.status === \"win\") {\n      return \"You won!\";\n    } else if (this.state.status === \"lose\") {\n      return \"You hit a bomb!\";\n    } else {\n      return \"\";\n    }\n  }\n  /*\n  * Render the component\n  */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.gameboard,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Array.from(Array(this.state.size).keys()).map(x => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: Array.from(Array(this.state.size).keys()).map(y => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  onClick: e => this.leftClickHandler(x, y),\n                  onContextMenu: e => this.rightClickHandler(e, x, y),\n                  children: this.determineSpaceContent(x, y)\n                }, y, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 45\n                }, this);\n              })\n            }, x, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: this.determineMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Minesweeper;","map":{"version":3,"sources":["/home/tyler/react-minesweeper/src/minesweeper/Minesweeper.js"],"names":["React","styles","Minesweeper","Component","constructor","props","state","size","mines","numCorrect","numFlags","status","map","createNewMap","_map","x","y","i","Math","floor","random","mine","setState","leftClickHandler","flag","open","countNeighborBombs","j","rightClickHandler","e","preventDefault","count","determineSpaceContent","toString","determineMessage","render","gameboard","Array","from","keys"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styles from './Minesweeper.module.css';\n\nclass Minesweeper extends React.Component {\n    /*\n    * Crete a new minesweeper component\n    */\n    constructor(props) {\n        super(props);\n\n        // Read in props\n        this.state = {\n            size: props.size,\n            mines: props.mines,\n            numCorrect: 0,\n            numFlags: 0,\n            status: \"playing\",\n            map: []\n        };\n\n        // Create a new mine field\n        this.createNewMap();\n    }\n\n    /*\n    * Inititalize a minesweeper map with this.state.size (square) ad this.state.mines\n    */\n    createNewMap() {\n        var _map = this.state.map;\n\n        // Create the blank map\n        for (var x = 0; x < this.state.size; x++) {\n            _map[x] = [];\n\n            for (var y = 0; y < this.state.size; y++) {\n                _map[x][y] = {\n                    \"flag\": false,\n                    \"open\": false,\n                    \"mine\": false\n                }\n            }\n        }\n\n        // Randomize mine locations\n        for (var i = 0; i < this.state.mines; i++) {\n            _map[Math.floor(Math.random() * this.state.size)][Math.floor(Math.random() * this.state.size)].mine = true;\n        }\n\n        // Store it\n        this.setState({ map: _map });\n    }\n\n    /*\n    * Handles when a space gets left clicked\n    */ \n    leftClickHandler(x, y) {\n        if (this.state.status !== \"playing\")\n            return;\n\n        // Don't want to be able to open flagged cells.\n        if(this.state.map[x][y].flag)\n            return;\n\n        var _map = this.state.map;\n        _map[x][y].open = true;\n\t\t\n\t\t// If we get a zero square, left click all around it for auto complete.\n\t\tif(this.countNeighborBombs(x, y) === 0){\n\t\t\tfor (var i = x - 1; i <= x + 1; i++) {\n\t\t\t\tfor (var j = y - 1; j <= y + 1; j++) {\n\t\t\t\t\tif (i >= 0 && j >= 0 && i < this.state.size && j < this.state.size) {\n\t\t\t\t\t\t_map[i][j].open = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n        this.setState({ map: _map }, () => {\n            if (this.state.map[x][y].mine) {\n                this.setState({ status: \"lose\" });\n            }\t\t\t\t\t\n        });\t\t\t\n    }\n\n    /*\n    * Handles when a space gets right clicked\n    */ \n    rightClickHandler(e, x, y) {\n        if (this.state.status !== \"playing\")\n            return;\n\n        e.preventDefault();\n\n        var _map = this.state.map;\n\n        if (_map[x][y].flag) {\n            // About to be unflagged\n            this.setState({ numFlags: this.state.numFlags - 1 })\n\n            if (_map[x][y].mine) {\n                // About to be incorrect\n                this.setState({ numCorrect: this.state.numCorrect - 1 })\n            }\n        } else {\n            // About to be flagged\n            this.setState({ numFlags: this.state.numFlags + 1 })\n\n            if (_map[x][y].mine) {\n                // About to be correct\n                this.setState({ numCorrect: this.state.numCorrect + 1 })\n            }\n        }\n\n        // Flip-flop the flag\n        _map[x][y].flag = !_map[x][y].flag;\n\n        this.setState({ map: _map }, () => {\n            if (this.state.numCorrect === this.state.mines && this.state.mines === this.state.numFlags) {\n                this.setState({ status: \"win\" });\n            }\n        });\n    }\n\n    /*\n    * Determines the bombs that surround this space\n    */\n    countNeighborBombs(x, y) {\n        var count = 0;\n\n        for (var i = x - 1; i <= x + 1; i++) {\n            for (var j = y - 1; j <= y + 1; j++) {\n                if (i >= 0 && j >= 0 && i < this.state.size && j < this.state.size) {\n                    if (this.state.map[i][j].mine) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    /*\n    * Determines the text to put in this space\n    */\n    determineSpaceContent(x, y) {\n        if (this.state.map[x][y].open) {\n            if (this.state.map[x][y].mine) {\n                return \"X\";\n            } else {\n                return this.countNeighborBombs(x, y).toString();\n            }\n        } else if (this.state.map[x][y].flag) {\n            return \"☑\";\n        } else {\n            return \"☐\"\n        }\n    }\n\n    /*\n    * Win/lose message if needed\n    */\n    determineMessage() {\n        if (this.state.status === \"win\") {\n            return \"You won!\"\n        } else if (this.state.status === \"lose\") {\n            return \"You hit a bomb!\";\n        } else {\n            return \"\";\n        }\n    }\n\n    /*\n    * Render the component\n    */\n    render() {\n        return (\n            <div>\n                <table className={styles.gameboard}> \n                    <thead>\n                    </thead>\n                    <tbody>\n                        {Array.from(Array(this.state.size).keys()).map(x => {\n                            return (\n                                <td key={x}>\n                                    {Array.from(Array(this.state.size).keys()).map(y => {\n                                        return (\n                                            <tr onClick={(e) => this.leftClickHandler(x, y)}\n                                                onContextMenu={(e) => this.rightClickHandler(e, x, y)}\n                                                key={y}>\n                                                {this.determineSpaceContent(x, y)}\n                                            </tr>\n                                        );\n                                    })}\n                                </td>\n                            )\n                        })}\n                    </tbody>\n                </table>\n                <center><h1>{this.determineMessage()}</h1></center>\n            </div>\n        );\n    }\n}\n\nexport default Minesweeper;"]},"metadata":{},"sourceType":"module"}