{"ast":null,"code":"var _jsxFileName = \"/home/dev/minesweeper/src/minesweeper/Minesweeper.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Minesweeper extends React.Component {\n  constructor(props) {\n    super(props); // Read in props\n\n    this.state = {\n      size: props.size,\n      mines: props.mines,\n      numCorrect: 0,\n      status: \"playing\",\n      map: []\n    }; // Create a new mine field\n\n    this.createNewMap();\n  }\n\n  createNewMap() {\n    var _map = this.state.map; // Create the blank map\n\n    for (var x = 0; x < this.state.size; x++) {\n      _map[x] = [];\n\n      for (var y = 0; y < this.state.size; y++) {\n        _map[x][y] = {\n          \"flag\": false,\n          \"open\": false,\n          \"mine\": false\n        };\n      }\n    } // Randomize mine locations\n\n\n    for (var i = 0; i < this.state.mines; i++) {\n      _map[Math.floor(Math.random() * this.state.size)][Math.floor(Math.random() * this.state.size)].mine = true;\n    } // Store it\n\n\n    this.setState({\n      map: _map\n    });\n  }\n\n  leftClickHandler(e, x, y) {\n    if (this.state.status !== \"playing\") return;\n    e.preventDefault();\n    var _map = this.state.map;\n    _map[x][y].open = true;\n    this.setState({\n      map: _map\n    }, () => {\n      if (this.state.map[x][y].mine) {\n        this.setState({\n          status: \"lose\"\n        });\n      }\n    });\n  }\n\n  rightClickHandler(e, x, y) {\n    e.preventDefault();\n    var _map = this.state.map; // This space occupies a mine\n\n    if (_map[x][y].mine) {\n      if (_map[x][y].flag) {\n        // It is curretly correct, but about to be incorrect.\n        this.setState({\n          numCorrect: this.state.numCorrect - 1\n        });\n      } else {\n        // It is curretly incorrect, but about to be correct.\n        this.setState({\n          numCorrect: this.state.numCorrect + 1\n        });\n      }\n    } // Flip-flop the flag\n\n\n    _map[x][y].flag = !_map[x][y].flag;\n    this.setState({\n      map: _map\n    }, () => {\n      if (this.state.numCorrect === this.state.mines) {\n        this.setState({\n          status: \"win\"\n        });\n      }\n    });\n  }\n\n  countNeighborBombs(x, y) {\n    var count = 0;\n\n    for (var i = x - 1; i <= x + 1; i++) {\n      for (var j = y - 1; j <= y + 1; j++) {\n        if (i > 0 && j > 0 && i < this.state.size && j < this.state.size) {\n          if (this.state.map[i][j].mine) {\n            count++;\n          }\n        }\n      }\n    }\n\n    return count;\n  }\n\n  determineSpaceContent(x, y) {\n    if (this.state.map[x][y].open) {\n      if (this.state.map[x][y].mine) {\n        return \"X\";\n      } else {\n        return this.countNeighborBombs(x, y).toString();\n      }\n    } else if (this.state.map[x][y].flag) {\n      return \"☑\";\n    } else {\n      return \"☐\";\n    }\n  }\n\n  determineMessage() {\n    if (this.state.status === \"win\") {\n      return \"You won!\";\n    } else if (this.state.status === \"lose\") {\n      return \"You hit a bomb!\";\n    } else {\n      return \"\";\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Array.from(Array(this.state.size).keys()).map(x => {\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: Array.from(Array(this.state.size).keys()).map(y => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  onClick: e => this.leftClickHandler(e, x, y),\n                  onContextMenu: e => this.rightClickHandler(e, x, y),\n                  children: this.determineSpaceContent(x, y)\n                }, y, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 45\n                }, this);\n              })\n            }, x, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.determineMessage()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Minesweeper;","map":{"version":3,"sources":["/home/dev/minesweeper/src/minesweeper/Minesweeper.js"],"names":["React","Minesweeper","Component","constructor","props","state","size","mines","numCorrect","status","map","createNewMap","_map","x","y","i","Math","floor","random","mine","setState","leftClickHandler","e","preventDefault","open","rightClickHandler","flag","countNeighborBombs","count","j","determineSpaceContent","toString","determineMessage","render","Array","from","keys"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Minesweeper extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // Read in props\n        this.state = {\n            size: props.size,\n            mines: props.mines,\n            numCorrect: 0,\n            status: \"playing\",\n            map: []\n        };\n\n        // Create a new mine field\n        this.createNewMap();\n    }\n\n    createNewMap() {\n        var _map = this.state.map;\n\n        // Create the blank map\n        for (var x = 0; x < this.state.size; x++) {\n            _map[x] = [];\n\n            for (var y = 0; y < this.state.size; y++) {\n                _map[x][y] = {\n                    \"flag\": false,\n                    \"open\": false,\n                    \"mine\": false\n                }\n            }\n        }\n\n        // Randomize mine locations\n        for (var i = 0; i < this.state.mines; i++) {\n            _map[Math.floor(Math.random() * this.state.size)][Math.floor(Math.random() * this.state.size)].mine = true;\n        }\n\n        // Store it\n        this.setState({ map: _map });\n    }\n\n    leftClickHandler(e, x, y) {\n        if(this.state.status !== \"playing\")\n            return;\n\n        e.preventDefault();\n\n        var _map = this.state.map;\n        _map[x][y].open = true;\n        this.setState({ map: _map }, () => {\n            if (this.state.map[x][y].mine) {\n                this.setState({ status: \"lose\" });\n            }\n        });\n    }\n\n    rightClickHandler(e, x, y) {\n        e.preventDefault();\n\n        var _map = this.state.map;\n\n        // This space occupies a mine\n        if (_map[x][y].mine) {\n\n            if (_map[x][y].flag) {\n                // It is curretly correct, but about to be incorrect.\n                this.setState({ numCorrect: this.state.numCorrect - 1 })\n            } else {\n                // It is curretly incorrect, but about to be correct.\n                this.setState({ numCorrect: this.state.numCorrect + 1 })\n            }\n        }\n\n        // Flip-flop the flag\n        _map[x][y].flag = !_map[x][y].flag;\n\n        this.setState({ map: _map }, () => {\n            if (this.state.numCorrect === this.state.mines) {\n                this.setState({ status: \"win\" });\n            }\n        });\n    }\n\n    countNeighborBombs(x, y) {\n        var count = 0;\n\n        for (var i = x - 1; i <= x + 1; i++) {\n            for (var j = y - 1; j <= y + 1; j++) {\n                if (i > 0 && j > 0 && i < this.state.size && j < this.state.size) {\n                    if (this.state.map[i][j].mine) {\n                        count++;\n                    }\n                }\n            }\n        }\n\n        return count;\n    }\n\n    determineSpaceContent(x, y) {\n        if (this.state.map[x][y].open) {\n            if (this.state.map[x][y].mine) {\n                return \"X\";\n            } else {\n                return this.countNeighborBombs(x, y).toString();\n            }\n        } else if (this.state.map[x][y].flag) {\n            return \"☑\";\n        } else {\n            return \"☐\"\n        }\n    }\n\n    determineMessage() {\n        if (this.state.status === \"win\") {\n            return \"You won!\"\n        } else if (this.state.status === \"lose\") {\n            return \"You hit a bomb!\";\n        } else {\n            return \"\";\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <table>\n                    <thead>\n                    </thead>\n                    <tbody>\n                        {Array.from(Array(this.state.size).keys()).map(x => {\n                            return (\n                                <td key={x}>\n                                    {Array.from(Array(this.state.size).keys()).map(y => {\n                                        return (\n                                            <tr onClick={(e) => this.leftClickHandler(e, x, y)}\n                                                onContextMenu={(e) => this.rightClickHandler(e, x, y)}\n                                                key={y}>\n                                                {this.determineSpaceContent(x, y)}\n                                            </tr>\n                                        );\n                                    })}\n                                </td>\n                            )\n                        })}\n                    </tbody>\n                </table>\n                <h1>{this.determineMessage()}</h1>\n            </div>\n        );\n    }\n}\n\nexport default Minesweeper;"]},"metadata":{},"sourceType":"module"}